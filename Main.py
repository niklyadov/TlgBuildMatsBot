import telebot
from Logic import BestFinder, HistoryAppender, Parsers, Graphics
import schedule
import threading
import time
import os


from DB.DbContexsts import Users, Settings, Requests, RenewedFavourites, Logs, Key_Words, Favourites

_bot = telebot.TeleBot('1898682710:AAGGjRKCbh3a2zPzylGSqQ_Se9x3xSCPBBM')
_users = Users.Users()


# –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@_bot.message_handler(commands=['help', 'start'])
def start_command(message):
    uid = message.from_user.id

    if not _users.is_registered(uid):
        _users.register_user(uid)
        _bot.reply_to(message, "–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

    _bot.reply_to(message, "–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤,\n–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/search [–∑–∞–ø—Ä–æ—Å]")


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
@_bot.message_handler(commands=["search"])
def search_word_command(message):
    if len(message.text) < 9:
        _bot.reply_to(message, "–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤,\n–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '/search [–∑–∞–ø—Ä–æ—Å]")
        return

    uid = message.from_user.id
    settings = Settings.Settings.get_settings(uid)
    bf = BestFinder.BestFinder(settings[0], settings[1], uid)
    top = bf.find_best(message.text[8:])
    msg = ""
    if len(top) == 0:
        _bot.reply_to(message, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ \U0001F614")
        return

    _bot.reply_to(message, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—ã –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:")
    counter = 1
    for id, value in top:
        msg = prepare_msg(value, counter)
        counter += 1

        _bot.send_message(message.from_user.id, msg)


_ordering = {1: '—Ü–µ–Ω–∞', 2: '—Ä–µ–π—Ç–∏–Ω–≥', 3: '–∞-—è', 4: '—è-–∞'}


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –∑–∏–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@_bot.message_handler(commands=["settings"])
def settings_command(message):
    uid = message.from_user.id
    settings = Settings.Settings.get_settings(uid)
    if len(message.text) < 11:
        _bot.reply_to(message, "–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
                               "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {}".format(settings[0]) +
                               "\n–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: {}".format(_ordering[settings[1]]) +
                               settings_help())
        return
    set = message.text.split()
    if len(set) != 3:
        _bot.reply_to(message, settings_help())
        return
    top_count = int(set[1])
    ordering = set[2]
    if top_count <= 0 or top_count >= 9:
        _bot.reply_to(message, settings_help())
        return

    order = None
    for key, value in _ordering.items():
        if ordering == value:
            order = key
    if order is None:
        _bot.reply_to(message, settings_help())
        return

    Settings.Settings.change_settings(uid, top_count, order)
    _bot.reply_to(message, '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')


def settings_help():
    return "\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:" \
           "\n/settings [–∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (1-9)] [—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ (—Ü–µ–Ω–∞, —Ä–µ–π—Ç–∏–Ω–≥, –∞-—è, —è-–∞)]"


history = {}


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–æ–≤
# (–¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ —Å–≤–æ—é, –¥–ª—è –∞–¥–º–∏–Ω–∞ - –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@_bot.message_handler(commands=["history"])
def history_command(message):
    uid = message.from_user.id
    msg = ""

    if Users.Users.is_admin(uid) and len(message.text) > 8:
        id = message.text[9:]
        msg += "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + id + "\n\n"
    else:
        id = uid
        msg += "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n\n"

    global history
    history = Logs.Logs.get_user_requests_history(id)

    if len(history) == 0:
        _bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    history_count = 5
    small_history = {}
    if len(history) >= history_count:
        for key, value in history.items():
            if len(small_history) < history_count:
                small_history[key] = value
    else:
        small_history = history
    _bot.reply_to(message, msg)

    show_user_history(message, small_history)

    if len(history) >= history_count:
        markup = telebot.types.InlineKeyboardMarkup()
        btn = telebot.types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é", reply_markup=markup,
                                                 callback_data="show_history")
        markup.add(btn)
        _bot.send_message(message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–Ω–µ–µ:', reply_markup=markup)


def show_user_history(message, history):
    for date, requests in history.items():

        counter = 1
        for request in requests:
            msg = '–ó–∞–ø—Ä–æ—Å –æ—Ç üìÖ ' + date + ':\n'
            msg += prepare_msg(request, counter)
            counter += 1

            markup = telebot.types.InlineKeyboardMarkup()
            btn = telebot.types.InlineKeyboardButton(text="‚≠êÔ∏è–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è", reply_markup=markup,
                                                             callback_data="add_to_favourites")
            markup.add(btn)
            _bot.send_message(message.chat.id, msg, reply_markup = markup)


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
# (–¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ —Å–≤–æ–π, –¥–ª—è –∞–¥–º–∏–Ω–∞ - –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@_bot.message_handler(commands=["favourites"])
def favourites_command(message):
    uid = message.from_user.id
    msg = ""

    if Users.Users.is_admin(uid) and len(message.text) > len('/favourites '):
        id = message.text[len('/favourites '):]
        msg += "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + id + "\n\n"
    else:
        id = uid
        msg += "–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n\n"

    favourites = Favourites.Favourites.get_user_favourites(id)
    if len(favourites) == 0:
        _bot.reply_to(message, "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    _bot.reply_to(message, msg)
    for date, request in favourites.items():

        counter = 1

        for line in request:
            msg = '–ó–∞–ø—Ä–æ—Å –æ—Ç üìÖ ' + date + ':\n'
            msg += prepare_msg(line, counter)
            counter += 1

            markup = telebot.types.InlineKeyboardMarkup()
            btn = telebot.types.InlineKeyboardButton(text="‚ùå –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ‚ùå", reply_markup=markup,
                                                     callback_data="remove_from_favourites")
            markup.add(btn)
            _bot.send_message(message.chat.id, msg, reply_markup=markup)


days_count = 0


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –∏–∑–º–µ–Ω—è–ª–∞—Å—å —Ü–µ–Ω–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –¥–Ω—è–º
@_bot.message_handler(commands=["pricehistory"])
def price_history_command(message):
    global days_count
    days_count = message.text[len('/pricehistory '):]
    if not days_count.isnumeric() or len(message.text) <= len('/pricehistory '):
        _bot.reply_to(message, '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É'
                               '\n/pricehistory [–ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è—â–Ω–µ–≥–æ –¥–Ω—è –≤ –¥–Ω—è—Ö]')
        return
    days_count = int(days_count)
    if days_count <= 1:
        _bot.reply_to(message, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ')
        return

    key_words = Key_Words.key_words
    markup = telebot.types.InlineKeyboardMarkup()
    for word in key_words:
        markup.add(telebot.types.InlineKeyboardButton(text=word,
                                              callback_data="{}_category".format(word)))
    _bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=markup)


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∞—è —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@_bot.message_handler(commands=['myrole'])
def my_role_command(message):
    uid = message.from_user.id

    if _users.is_registered(uid):
        if _users.is_admin(uid):
            if _users.is_super_user(uid):
                _bot.reply_to(message, "–í—ã —Å—É–ø–µ—Ä-—é–∑–µ—Ä")
            else:
                _bot.reply_to(message, "–í—ã –∞–¥–º–∏–Ω")
        else:
            _bot.reply_to(message, "–í—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    else:
        _bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ö–∞–∫ –≤—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏?")


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∞–¥–º–∏–Ω—É —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–µ–ª–µ–π
@_bot.message_handler(commands=["users"])
def admin_users_command(message):
    uid = message.from_user.id

    if not Users.Users.is_admin(uid):
        return

    users = Users.Users.get_all_users()

    _bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n")
    for user in users:
        _bot.send_message(message.from_user.id, "id: {}\n–†–æ–ª—å: {}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {}\n\n".format(user[0], user[1], user[2]))


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∞–¥–º–∏–Ω—É —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
@_bot.message_handler(commands=["usershistory"])
def admin_users_history_command(message):
    uid = message.from_user.id
    if not Users.Users.is_admin(uid):
        return

    days_count = get_days_from_command(message, "usershistory")
    if days_count is None:
        return

    stat = Users.Users.get_users_statistics_history(int(days_count))
    save_path = Graphics.Graphics.get_history_histogram(stat, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º')
    send_image(message.from_user.id, save_path)


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∞–¥–º–∏–Ω—É —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º
@_bot.message_handler(commands=["requestshistory"])
def admin_requests_history_command(message):
    uid = message.from_user.id
    if not Users.Users.is_admin(uid):
        return

    days_count = get_days_from_command(message, "requestshistory")
    if days_count is None:
        return

    stat = Logs.Logs.get_requests_statistics_history(int(days_count))
    save_path = Graphics.Graphics.get_history_histogram(stat, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º')
    send_image(message.from_user.id, save_path)


def get_days_from_command(message, command):
    if not len(message.text) > len('/{} '.format(command)):
        _bot.reply_to(message, '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /{} [–ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è—â–Ω–µ–≥–æ –¥–Ω—è –≤ –¥–Ω—è—Ö]'.format(command))
        return None

    days_count = message.text[len('/{} '.format(command)):]
    if not days_count.isnumeric():
        _bot.reply_to(message, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        return None
    return days_count


def send_image(uid, save_path):
    img = open(save_path, 'rb')
    _bot.send_photo(uid, photo=img)
    img.close()
    os.remove(save_path)


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å—É–ø–µ—Ä-—é–∑–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
@_bot.message_handler(commands=['setadmin'])
def super_user_set_admin_command(message):
    uid = message.from_user.id

    if not _users.is_registered(uid) or not _users.is_admin(uid):
        return

    if not _users.is_super_user(uid):
        _bot.reply_to(message, "‚ùï –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    if len(message.text) <= len('/setadmin '):
        _bot.reply_to(message, "‚ùï –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: \n/setadmin [id —é–∑–µ—Ä–∞]")
        return

    target_uid = message.text[len('/setadmin '):]

    if not target_uid.isnumeric():
        _bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user id.")
        return

    target_uid = int(target_uid)

    if not _users.is_registered(target_uid):
        _bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if _users.is_admin(target_uid):
        _bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    _users.set_user_role(uid, int(target_uid), 2)
    _bot.reply_to(message, "‚úÖ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + str(target_uid) + " —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å—É–ø–µ—Ä-—é–∑–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@_bot.message_handler(commands=['unsetadmin'])
def super_user_unset_admin_command(message):
    uid = message.from_user.id

    if not _users.is_registered(uid) or not _users.is_admin(uid):
        return

    if not _users.is_super_user(uid):
        _bot.reply_to(message, "‚ùï –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    if len(message.text) <= len('/unsetadmin '):
        _bot.reply_to(message, "‚ùï –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: \n/unsetadmin [id —é–∑–µ—Ä–∞]")
        return

    target_uid = message.text[len('/unsetadmin '):]

    if not target_uid.isnumeric():
        _bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user id.")
        return

    target_uid = int(target_uid)

    if not _users.is_registered(target_uid):
        _bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if not _users.is_admin(target_uid):
        _bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    _users.set_user_role(uid, int(target_uid), 3)
    _bot.reply_to(message, "‚úÖ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + str(target_uid) + " —Ç–µ–ø–µ—Ä—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


# –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å—É–ø–µ—Ä-—é–∑–µ—Ä—É –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-—é–∑–µ—Ä–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@_bot.message_handler(commands=['superusertransfer'])
def super_user_transfer_command(message):
    uid = message.from_user.id

    if not _users.is_registered(uid) or not _users.is_admin(uid):
        return

    if not _users.is_super_user(uid):
        _bot.reply_to(message, "‚ùï –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    if len(message.text) <= len('/superusertransfer '):
        _bot.reply_to(message, "‚ùï –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: \n/superusertransfer [id —é–∑–µ—Ä–∞]")
        return

    [user_uid, target_uid] = message.text[len('/superusertransfer '):].split()

    if not user_uid.isnumeric() or not target_uid.isnumeric():
        _bot.reply_to(message, "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π user id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({}).".format(uid))
        return

    target_uid = int(target_uid)
    user_uid = int(user_uid)

    if not user_uid == uid:
        _bot.reply_to(message, "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–µ—Ä–Ω—ã–π.\n"
                               "–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π user id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({}).".format(uid))
        return

    if not _users.is_registered(target_uid):
        _bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if _users.is_super_user(target_uid):
        _bot.reply_to(message, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return

    _users.transfer_super_user_rights(uid, int(target_uid))
    _bot.reply_to(message, "‚úÖ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + str(target_uid) + "—Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")


@_bot.callback_query_handler(func=lambda c: 'favourites' in c.data)
def favourites_buttons_handler(c):
    uid = c.from_user.id
    json = c.message.json['text']
    full_name = json.split('\n')[1][5:]
    if c.data == 'add_to_favourites':
        try:
            Favourites.Favourites.add_request_to_favourites(uid, full_name)
        except Exception as e:
            _bot.reply_to(c.message, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —Ç–æ, —á—Ç–æ —Ç–∞–º —É–∂–µ –µ—Å—Ç—å")
    if c.data == 'remove_from_favourites':
        Favourites.Favourites.remove_request_from_favourites(uid, full_name)
        _bot.delete_message(c.from_user.id, c.message.message_id)
    _bot.answer_callback_query(c.id)


@_bot.callback_query_handler(func=lambda c: 'history' in c.data)
def history_buttons_handler(c):
    global history
    show_user_history(c.message, history)
    history = {}
    _bot.answer_callback_query(c.id)


@_bot.callback_query_handler(func=lambda c: 'category' in c.data)
def categories_buttons_handler(c):
    category = c.data.split('_')[0]
    show_history(c, category, Requests.Requests.get_price_statistics_history(category, days_count))
    _bot.answer_callback_query(c.id)


def show_history(c, category, stat):
    # TODO - –î–∞—Ä—å—è: —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω –ø–æ –¥–Ω—è–º –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    _bot.send_message(c.from_user.id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - {}:'.format(category))
    save_path = Graphics.Graphics.get_history_plot(stat, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}'.format(category))
    send_image(c.from_user.id, save_path)


def prepare_msg(line, counter):
    msg = ""
    msg += '{}\ufe0f\u20e3 '.format(counter)
    msg += ' {}\n'.format(line['full_name'])
    msg += '–¶–µ–Ω–∞: {}'.format(line['price'])
    if line['per'] is not None:
        msg += ' –∑–∞ {}'.format(line['per'])
    msg += '\n'
    if line['rating'] is not None and line['rating'] != 0:
        msg += '–†–µ–π—Ç–∏–Ω–≥: {}\n'.format(line['rating'])
    #msg += '–î–æ—Å—Ç—É–ø–Ω–æ –≤:\n'
    #for available_at in line['available_at']:
       # msg += ' -- {}\n'.format(available_at)
    if line['url'] is not None:
        msg += '\n'
        msg += line['url']
    msg += '\n\n'
    return msg


def cron_requests_update():
    print('#: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
    history_appender = HistoryAppender.HistoryAppender(Parsers.parsers)
    history_appender.append_history()
    print('#: –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')

    db_result = RenewedFavourites.RenewedFavourites.get_renewed_favourites()
    for user_id, old_price, new_price, full_name in db_result:
        if old_price != new_price:
            if old_price > new_price:
                symbol = "‚§µÔ∏è"
            else:
                symbol = "‚§¥Ô∏è"

            _bot.send_message(user_id, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –≤–∞—à–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:"
                                       "\n{}"
                                       "\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {}"
                                       "\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {} - {}".format(full_name, old_price, new_price, symbol))

    RenewedFavourites.RenewedFavourites.clear_renewed_favourites()


def timer():
    while True:
        schedule.run_pending()
        time.sleep(60)


schedule.every().day.at("18:00").do(cron_requests_update)
threading.Thread(target=timer).start()

while True:
    try:
        _bot.polling(none_stop=True)

    except Exception as e:
        print('#: –ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–∏—á–∏–Ω–µ:')
        print(e)
        print('\n')
        time.sleep(15)
